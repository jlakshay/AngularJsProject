var cov_2buj57wd9s=function(){var path='/home/traning/Documents/myapp1/app.js',hash='9f7a86cb8c0e5a7a6ae821f4813f609f778ed0c9',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/traning/Documents/myapp1/app.js',statementMap:{'0':{start:{line:1,column:10},end:{line:1,column:26}},'1':{start:{line:2,column:13},end:{line:2,column:32}},'2':{start:{line:3,column:17},end:{line:3,column:39}},'3':{start:{line:4,column:10},end:{line:4,column:19}},'4':{start:{line:5,column:11},end:{line:5,column:50}},'5':{start:{line:6,column:14},end:{line:6,column:34}},'6':{start:{line:7,column:9},end:{line:7,column:22}},'7':{start:{line:8,column:13},end:{line:8,column:30}},'8':{start:{line:9,column:11},end:{line:9,column:26}},'9':{start:{line:11,column:12},end:{line:11,column:37}},'10':{start:{line:12,column:12},end:{line:12,column:37}},'11':{start:{line:13,column:13},end:{line:13,column:39}},'12':{start:{line:14,column:16},end:{line:14,column:42}},'13':{start:{line:15,column:22},end:{line:15,column:92}},'14':{start:{line:17,column:0},end:{line:17,column:54}},'15':{start:{line:19,column:0},end:{line:19,column:27}},'16':{start:{line:20,column:0},end:{line:20,column:52}},'17':{start:{line:32,column:0},end:{line:32,column:20}},'18':{start:{line:33,column:0},end:{line:33,column:25}},'19':{start:{line:34,column:0},end:{line:34,column:27}},'20':{start:{line:35,column:0},end:{line:35,column:30}},'21':{start:{line:37,column:0},end:{line:37,column:27}},'22':{start:{line:38,column:0},end:{line:40,column:2}},'23':{start:{line:39,column:1},end:{line:39,column:39}},'24':{start:{line:111,column:0},end:{line:113,column:2}},'25':{start:{line:112,column:2},end:{line:112,column:53}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:38,column:35},end:{line:38,column:36}},loc:{start:{line:38,column:45},end:{line:40,column:1}},line:38},'1':{name:'(anonymous_1)',decl:{start:{line:111,column:17},end:{line:111,column:18}},loc:{start:{line:111,column:29},end:{line:113,column:1}},line:111}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0},f:{'0':0,'1':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();let http=(cov_2buj57wd9s.s[0]++,require('http'));let express=(cov_2buj57wd9s.s[1]++,require('express'));let bodyParser=(cov_2buj57wd9s.s[2]++,require('body-parser'));const app=(cov_2buj57wd9s.s[3]++,express());let config=(cov_2buj57wd9s.s[4]++,{db:'mongodb://localhost:27017/testdb'});let mongoose=(cov_2buj57wd9s.s[5]++,require('mongoose'));let fs=(cov_2buj57wd9s.s[6]++,require('fs'));let morgan=(cov_2buj57wd9s.s[7]++,require('morgan'));let path=(cov_2buj57wd9s.s[8]++,require('path'));let index=(cov_2buj57wd9s.s[9]++,require('./routes/index'));let users=(cov_2buj57wd9s.s[10]++,require('./routes/users'));let update=(cov_2buj57wd9s.s[11]++,require('./routes/update'));let empdelete=(cov_2buj57wd9s.s[12]++,require('./routes/delete'));let accessLogStream=(cov_2buj57wd9s.s[13]++,fs.createWriteStream(path.join(__dirname,'access.log'),{flags:'a'}));// setup the logger
cov_2buj57wd9s.s[14]++;app.use(morgan('combined',{stream:accessLogStream}));cov_2buj57wd9s.s[15]++;app.use(bodyParser.json());/*/Allow to parse through the elements of json and*/cov_2buj57wd9s.s[16]++;app.use(bodyParser.urlencoded({extended:false}));/* get them through url*//*mongoose.set('debug',true);
let Schema=mongoose.Schema;
let MainSchema=new Schema({
	name:String,
	empcode:Number,
	age:Number,
	salary:Number
},{collection:"root",varsionKey:false});
let model=mongoose.model('root',MainSchema);
*/cov_2buj57wd9s.s[17]++;app.use('/',index);cov_2buj57wd9s.s[18]++;app.use('/users',users);cov_2buj57wd9s.s[19]++;app.use('/update',update);cov_2buj57wd9s.s[20]++;app.use('/delete',empdelete);cov_2buj57wd9s.s[21]++;mongoose.connect(config.db);cov_2buj57wd9s.s[22]++;mongoose.connection.on('connected',function(){cov_2buj57wd9s.f[0]++;cov_2buj57wd9s.s[23]++;console.log("Connected Successfully");});/*
app.get('/',(req, res)=> {
  model.find(function(err,data){
  	if(err){
  		console.log(err);
  		res.send(err);
  	}
  	else
  	{
  		console.log(data);
  		res.json({model:data});
  	}
  })
})

app.post('/',(req, res)=> {
 	let name=req.body.name;
	let empcode=req.body.empcode;
	let salary=req.body.salary;
	let age=req.body.age;

	model.insertMany({
		"name":name,
		"empcode":empcode,
		"age":salary,
		"salary":age
	}, (err,user)=>{
		if(err){
			console.log(err);
		}
		else{
			console.log(user);
			res.json({model:user});
		}
	})
})

app.put('/:empcode', function (req, res) {
	model.update({'empcode':req.params.empcode},
		{$set:{name:req.body.name,empcode:req.body.empcode,age:req.body.age,salary:req.body.salary}},function(err,data){
			if(err)
			{
				console.log(err);
				res.send(err);
			}
			else
			{
			console.log(data);
			res.json({model:data});
			}
		})
})

app.delete('/:empcode', (req, res)=>{
  model.findOneAndRemove({'empcode':req.params.empcode},
		(err,data)=>{
			if(err)
			{
				console.log(err);
				res.send(err);
			}
			else
			{
			console.log(data);
			res.status(204);
			}
		})
})*/cov_2buj57wd9s.s[24]++;app.listen(3000,function(){cov_2buj57wd9s.f[1]++;cov_2buj57wd9s.s[25]++;console.log('Example app listening on port 3000!');});